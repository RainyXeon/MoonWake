name: "Build Kernel"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "Parse configs.json"
    runs-on: ubuntu-24.04
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' .github/configs/*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "Build kernel"
    runs-on: ubuntu-24.04
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}

      builddate: "${{ needs.Set-repos.outputs.builddate }}"
      fileName: ${{ matrix.repos.name }}
      ogImageLink: ${{ matrix.repos.ogImageLink }}

      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}

      kernelSU: ${{ matrix.repos.kernelsu.enable }}
      kernelSUsetupLink: ${{ matrix.repos.kernelsu.setupLink }}
      kernelSUsetupArg: ${{ matrix.repos.kernelsu.setupArg }}
      kernelSUsetupName: ${{ matrix.repos.kernelsu.setupName }}
      kernelSUsusfsLink: ${{ matrix.repos.kernelsu.susfsLink }}
      kernelSUneedPatch: ${{ matrix.repos.kernelsu.needPatch }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}
    steps:
      - name: "Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar
          sudo apt-get install -y checkinstall libncursesw5-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev
          wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar -xvf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure
          make -j$(nproc)
          sudo make install
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
          sudo python2.7 get-pip.py
          sudo update-alternatives --install /usr/bin/python python /usr/local/lib/python2.7 1
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2 || true
          cd ..
      - name: "Create cache key from `repos`"
        if: ${{ env.ccache == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT
      - name: "Cache ccache files"
        if: ${{ env.ccache == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
      - name: "Setup Anykernel3"
        if: ${{ env.useAnykernel == 'true' }}
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
          echo "Setup Anykernel3 => ($ANYKERNEL_REPO)"
      - name: "Clone kernel source => (${{ env.KERNEL_REPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME
          echo -e "\n ! Kernel is at commit: $(git -C $KERNEL_NAME rev-parse HEAD)\n"
          echo "Clone kernel source => ($KERNEL_REPO)"         
      - name: "Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            # Github
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            # From archive
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")
            echo $toolchain_url
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "Clone $toolchain_name => ($toolchain_repo)"
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xvf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxvf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
            fi
            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done
      - name: "Set args"
        id: generate-args
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"
          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")
          args="-j${{ env.THREAD }}"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && args="$args O=${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CC" ]; then
            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi
            if [ ${{ env.ccache }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$params")
          echo "$args"
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "args=$args" >> $GITHUB_OUTPUT
      - name: "Integrate Kernel Root implementation"
        id: integrate-kernelsu-next
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.kernelSU == 'true' }}
        run: |
          echo "" > .scmversion
          curl -LSs "${{ env.kernelSUsetupLink }}" | bash -s ${{ env.kernelSUsetupArg }}
          KERNELSU_TYPE_ROOT_IMPL_VERSION=$(cd ${{ env.kernelSUsetupName }} && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo -e "\nKernelSU Type Root Implementation version: $KERNELSU_TYPE_ROOT_IMPL_VERSION\n"
          echo -e "KERNELSU_TYPE_ROOT_IMPL_VERSION=$KERNELSU_TYPE_ROOT_IMPL_VERSION" >> $GITHUB_OUTPUT

          if [ ${{ env.kernelSUneedPatch }} = true ]; then
            cd ${{ env.kernelSUsetupName }}
            curl ${{ env.kernelSUsusfsLink }} -o susfs.patch
            patch -p1 < susfs.patch
            cd ../scripts
            sed -i 's/ -dirty//g' setlocalversion
          else
            cd scripts
            sed -i 's/ -dirty//g' setlocalversion
          fi
      - name: "Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}
      - name: "Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }}
      - name: "Pack AnyKernel3.zip"
        if: ${{ env.useAnykernel == 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          ls -al
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtb.img" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtb.img ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtb" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtb ./AnyKernel3/
          fi
          cd AnyKernel3/
      - name: "Upload AnyKernel3 image"
        uses: actions/upload-artifact@v4
        if: ${{ env.useAnykernel == 'true' }}
        with:
          name: "${{ env.fileName }}-${{ env.KERNEL_DEVICE }}-${{ env.builddate }}"
          path: AnyKernel3/*
      - name: "Push to out_kernel folder and download ramdisk"
        if: ${{ env.useAnykernel != 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          mkdir out_kernel
          cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image ./out_kernel/
      - name: "Pack kernel image"
        if: ${{ env.useAnykernel != 'true' }}
        run: | 
          curl -L -O https://github.com/Shubhamvis98/AIK/raw/4ac321dfd48e16344e6146c505708aa720ff0bb3/bin/magiskboot_x86
          chmod +x ./magiskboot_x86
          mkdir wrap_kernel
          cd wrap_kernel
          curl -L -O ${{ env.ogImageLink }}
          ../magiskboot_x86 unpack og-apatch.img
          rm -rf ./kernel
          mv ../out_kernel/Image ./kernel
          ../magiskboot_x86 repack og-apatch.img
          cd ..
          cp -f ./wrap_kernel/new-boot.img ./out_kernel/${{ env.fileName }}-${{ env.KERNEL_DEVICE }}-${{ env.builddate }}.img
      - name: "Upload image"
        if: ${{ env.useAnykernel != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.fileName }}-${{ env.KERNEL_DEVICE }}-${{ env.builddate }}"
          path: "out_kernel/${{ env.fileName }}-${{ env.KERNEL_DEVICE }}-${{ env.builddate }}.img"
